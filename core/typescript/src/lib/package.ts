/**
 * Interfaces and classes for package authors to use and extend.
 *
 * @module
 */
import { Result } from 'neverthrow';

import {
  ComponentConfig,
  GeneralConfig,
  InfraConfig,
  NetworkConfig,
  RelationConfig,
  ServiceConfig,
} from './config';
import { PlanError, SubtypeAware, TypeAware } from './domain';

/**
 * Interface representing all resources included as part of the infra baseline generated by a package.
 *
 * It is expected to be implemented in a package to include **all* underlying resources which are to be augmented by custom code in a project using the package.
 *
 * @group For package authors
 */
export interface InfraPlanConstructs {}

/**
 * Short-hand type representing outputs from the infra baseline generated by a package.
 * It is commonly used for information (such as displaying) purposes.
 *
 * It should be used as-is. The `map` structure with `any` value offers flexibility.
 *
 * @group For both project creators and package authors
 */
export type InfraPlanOutputs = Map<string, any>;

/**
 * Concrete class that carries both the generated infra baseline and all the outputs as a result.
 *
 * @sealed Usually there is no need to extend this class.
 * @group For both project creators and package authors
 */
export class InfraPlan<IPC extends InfraPlanConstructs> {
  constructor(
    public readonly constructs: IPC,
    public readonly outputs: InfraPlanOutputs
  ) {}
}

/**
 * Abstract class to be extended by packages to generate infra baseline.
 *
 * @group For package authors
 */
export abstract class Planner<
  IPC extends InfraPlanConstructs,
  GC extends GeneralConfig,
  NC extends NetworkConfig,
  CC extends ComponentConfig,
  SC extends ServiceConfig,
  RC extends RelationConfig
> {
  /**
   * Provisioning infra according to the configuration.
   *
   * @param config The project configuration in full.
   * @param scope Optional parent construct.
   * @returns Result that encapsulates either the infra baseline {@link InfraPlan} if successful, or error {@link PlanError} if failed.
   */
  abstract runWith(
    config: InfraConfig<GC, NC, CC, SC, RC>,
    scope: any
  ): Result<InfraPlan<IPC>, PlanError>;
}

/**
 * A convenient interface to represent a typing classification.
 *
 * @group For package authors
 */
export interface NestedType extends TypeAware, SubtypeAware {}

/**
 * Interface used to model typing information for a package's components, services and relations.
 * Each package is expected to have a `types.json` file containing the available types and subtypes.
 *
 * @group For package authors
 */
export interface TypesInfo {
  /**
   * Available types and subtypes for components.
   */
  components: { [key: string]: NestedType };
  /**
   * Available types and subtypes for services.
   */
  services: { [key: string]: NestedType };
  /**
   * Available relations between a specific component/service and another component/service.
   * Both the key and value here refer to the entries defined in `components` and `services` fields.
   */
  relations: { [key: string]: string };
}
